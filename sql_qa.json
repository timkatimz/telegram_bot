[
   {
    "q": "№ 1. Что такое СУБД?",
    "a": "Допустим, есть большая база данных, которой пользуются многие сотрудники: кто-то ищет информацию, а кто-то изменяет или даже удаляет её. Чтобы правильно обрабатывать все эти запросы, нужно специальное программное обеспечение, и именно такое ПО получило название системы управления базами данных (СУБД)."
    },
    {
    "q": "№ 2. Какие типы СУБД в соответствии с моделями данных вы знаете?",
    "a": "Этот вопрос по SQL предполагает не просто назвать, но и дать краткое описание каждому типу.\n\nСуществует несколько типов СУБД:\n\n1.  Реляционные, которые поддерживают установку связей между таблицами с помощью первичных и внешних ключей. Пример — MySQL.\n2.  Flat File — базы данных с двумерными файлами, в которых содержатся записи одного типа и отсутствует связь с другими файлами, как в реляционных. Пример — Excel.\n3.  Иерархические подразумевают наличие записей, связанных друг с другом по принципу отношений один-к-одному или один-ко-многим. А вот для отношений многие-ко-многим следует использовать реляционную модель. Пример — Adabas.\n4.  Сетевые похожи на иерархические, но в этом случае «ребёнок» может иметь несколько «родителей» и наоборот. Примеры — IDS и IDMS.\n5.  Объектно-ориентированные СУБД работают с базами данных, которые состоят из объектов, используемых в ООП. Объекты группируются в классы и называются экземплярами, а классы в свою очередь взаимодействуют через методы. Пример — Versant.\n6.  Объектно-реляционные обладают преимуществами реляционной и объектно-ориентированной моделей. Пример — IBM Db2.\n7.  Многомерная модель является разновидностью реляционной и использует многомерные структуры. Часто представляется в виде кубов данных. Пример — Oracle Essbase.\n8.  Гибридные состоят из двух и более типов баз данных. Используются в том случае, если одного типа недостаточно для обработки всех запросов. Пример — Altibase HDВ.\n"
    },
    {
    "q": "№ 3. Что такое первичный ключ?",
    "a": "<b>Первичный ключ</b> или <b>PRIMARY KEY</b> предназначен для однозначной идентификации каждой записи в таблице и является строго уникальным (UNIQUE): две записи таблицы не могут иметь одинаковые значения первичного ключа. Нулевые значения (NULL) в PRIMARY KEY не допускаются. Если в качестве PRIMARY KEY используется несколько полей, их называют составным ключом. Пример:\n<code>\nCREATE TABLE USERS (\n  id INT NOT NULL,\n  name VARCHAR (20) NOT NULL,\n  PRIMARY KEY (id)\n);\n</code>\nЗдесь в качестве первичного ключа используется поле id."
    },
    {
    "q": "№ 4. Когда используется PRIMARY KEY?",
    "a": "<b>PRIMARY KEY</b> — это первичный ключ, который используется в качестве основного ключа и может быть использован для связи с дочерней таблицей, содержащей внешний ключ."
    },
    {
    "q": "№ 5. Что такое внешний ключ?",
    "a": "<b>Внешний ключ</b> или <b>FOREIGN KEY</b> также является атрибутом ограничения и обеспечивает связь двух таблиц. По сути, это поле или несколько полей, которые ссылаются на <b>PRIMARY KEY</b> в родительской таблице.\n\nПример использования:\n<code>\nCREATE TABLE order (\n  order_id INT NOT NULL,\n  user_id INT,\n  PRIMARY KEY (order_id),\n  FOREIGN KEY (user_id) REFERENCES users(id)\n);\n</code>\nВ данном случае внешний ключ, привязанный к полю <b>user_id</b> в таблице <b>order</b>, ссылается на первичный ключ <b>id</b> в таблице <b>users</b>, и именно по этим полям происходит связывание двух таблиц."
    },
  {
    "q": "№ 6. Какие ещё ограничения вы знаете, как они работают и указываются?",
    "a": "SQL-ограничения (constraints) указываются при создании или изменении таблицы. Это правила для ограничения типа данных, которые могут храниться в таблице. Действие с данными не будет выполнено, если нарушаются установленные ограничения.\n\n    <b>UNIQUE</b> — гарантирует уникальность значений в столбце;\n    <b>NOT NULL</b> — значение не может быть NULL;\n    <b>INDEX</b> — создаёт индексы в таблице для быстрого поиска/запросов;\n    <b>CHECK</b> — значения столбца должны соответствовать заданным условиям;\n    <b>DEFAULT</b> — предоставляет столбцу значения по умолчанию.\n"
    },
  {
    "q": "№ 7. Для чего используется ключевое слово <b>ORDER BY</b>?",
    "a": "Для сортировки данных в порядке возрастания (ASC) или убывания (DESC).\n\nПример использования:\n<code>\nSELECT * FROM user ORDER BY name DESC;\n</code>\nВыбираются пользователи, которые будут отсортированы по имени в порядке убывания. Дополните ответ на этот вопрос по SQL тем, что без указания DESC данные были бы отсортированы по умолчанию — в порядке возрастания:\n<code>\nSELECT * FROM user ORDER BY name;\n</code>"
    },
  {
    "q": "№ 8. Назовите четыре основных типа соединения в SQL",
    "a": "Чтобы объединить две таблицы в одну, следует использовать оператор JOIN. Соединение таблиц может быть внутренним (INNER) или внешним (OUTER), причём внешнее соединение может быть левым (LEFT), правым (RIGHT) или полным (FULL).\n\n    <b>INNER JOIN</b> — получение записей с одинаковыми значениями в обеих таблицах, т.е. получение пересечения таблиц.\n    <b>FULL OUTER JOIN</b> — объединяет записи из обеих таблиц (если условие объединения равно true) и дополняет их всеми записями из обеих таблиц, которые не имеют совпадений. Для записей, которые не имеют совпадений из другой таблицы, недостающее поле будет иметь значение NULL.\n    <b>LEFT JOIN</b> — возвращает все записи, удовлетворяющие условию объединения, плюс все оставшиеся записи из внешней (левой) таблицы, которые не удовлетворяют условию объединения.\n    <b>RIGHT JOIN</b> — работает точно так же, как и левое объединение, только в качестве внешней таблицы будет использоваться правая.\n\nРассмотрим пример соединения SQL таблиц с использованием INNER JOIN. Следующий запрос выбирает все заказы с информацией о клиенте:\n<code>\nSELECT Orders.OrderID, Customers.CustomerName\nFROM Orders\nINNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;\n</code>"
    },
  {
    "q": "№ 9. А что такое <b>Self JOIN?</b>",
    "a": "Такой вопрос тоже может прозвучать на собеседовании по SQL. Это выражение используется для того, чтобы таблица объединилась сама с собой, словно это две разные таблицы. Чтобы такое реализовать, одна из таких «таблиц» временно переименовывается.\n\nНапример, следующий SQL-запрос объединяет клиентов из одного города:\n<code>\nSELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City\nFROM Customers A, Customers B\nWHERE A.CustomerID <> B.CustomerID\nAND A.City = B.City\nORDER BY A.City;\n</code>"
    },
  {
    "q": "№ 10. Для чего нужен оператор <b>UNION?</b>",
    "a": "Он используется для объединения полученных данных из двух или более запросов, которые должны иметь одинаковое количество столбцов с одинаковыми типами данных и расположенных в том же порядке.\n\nПример использования:\n<code>\nSELECT column(s) FROM first_table\nUNION\nSELECT column(s) FROM second_table;\n</code>"
    },
  {
    "q": "№ 11. Как работают подстановочные знаки?",
    "a": "Это специальные символы, которые нужны для замены каких-либо знаков в запросе. Они используются вместе с оператором <b>LIKE</b>, с помощью которого можно отфильтровать запрашиваемые данные"
    },
  {
    "q": "№ 12. Какими бывают подстановочные знаки?",
    "a": "\n    <b>%</b> — заменить ноль или более символов;\n    <b>_</b> — заменить один символ.\n\nПримеры:\n<code>\nSELECT * FROM user WHERE name LIKE '%test%';\n</code>\nДанный запрос позволяет найти данные всех пользователей, имена которых содержат в себе «test».\n<code>\nSELECT * FROM user WHERE name LIKE 't_est';\n</code>\nА в этом случае имена искомых пользователей начинаются на «t», после содержат какой-либо символ и «est» в конце."
    },
  {
    "q": "№ 13. Что делают псевдонимы <b>Aliases</b>?",
    "a": "SQL-псевдонимы нужны для того, чтобы дать временное имя таблице или столбцу. Это нужно, когда в запросе есть таблицы или столбцы с неоднозначными именами. В этом случае для удобства в составлении запроса используются псевдонимы. SQL-псевдоним существует только на время запроса.\n\nПример:\n<code>\nSELECT very_long_column_name AS alias_name\nFROM table;\n</code>"
    },
  {
    "q": "№ 14. Для чего нужен оператор <b>INSERT INTO SELECT</b>?",
    "a": "Данный оператор копирует данные из одной таблицы и вставляет их в другую, при этом типы данных в обеих таблицах должны соответствовать.\n\nПример использования:\n<code>\nINSERT INTO second_table\nSELECT * FROM first_table\nWHERE condition;\n<code>"
    },
  {
    "q": "№ 15. Что такое нормализация и денормализация?",
    "a": "Нормализация отношений в SQL призвана организовать информацию в базе данных таким образом, чтобы она не занимала много места и с ней было удобно работать. Это удаление избыточных данных, устранение дублей, идентификация наборов связанных данных через PRIMARY KEY, etc.\n\nСоответственно, денормализация является обратным процессом, который вносит в нормализованную таблицу избыточные данные.\n"
    },
  {
    "q": "№ 16. Объясните разницу между командами <b>DELETE</b> и <b>TRUNCATE</b>",
    "a": "Команда <b>DELETE</b> — это DML-операция, которая удаляет записи из таблицы, соответствующие заданному условию:\n<code>\nDELETE FROM table_name WHERE condition;\n</code>\nПри этом создаются логи удаления, то есть операцию можно отменить.\n\nА вот команда <b>TRUNCATE</b> — это DDL-операция, которая полностью пересоздаёт таблицу, и отменить такое удаление невозможно:\n<code>\nTRUNCATE TABLE table_name;\n</code>"
    },
  {
    "q": "№ 17. Чем <b>VARCHAR</b> отличается от <b>NVARCHAR</b>?",
    "a": "Главное отличие в том, что VARCHAR хранит значения в формате ASCII, где символ занимает один байт, а NVARCHAR хранит значения в формате Unicode, где символ «весит» 2 байта. Тип VARCHAR следует использовать, если вы уверены, что в значениях не будет Unicode-символов. Например, VARCHAR можно применить к адресам электронной почты, состоящих из ASCII-символов."
    },
  {
    "q": "№ 18. Как выбрать записи с нечётными <b>Id</b>?",
    "a": "Один из самых распространённых вопросов на собеседовании. SQL запрос для выбора записей с нечётными id должен выглядеть следующим образом:\n<code>\nSELECT * FROM sample WHERE id % 2 != 0;\n</code>\nЕсли остаток от деления id на 2 равен нулю, перед нами чётное значение, и наоборот."
    },
  {
    "q": "№ 19. Как найти дубли в поле email?",
    "a": "<code>\nSELECT email, COUNT(email)\nFROM customers\nGROUP BY email\nHAVING COUNT(email) > 1;\n</code>\nФункция <b>COUNT()</b> возвращает количество строк из поля email. Оператор <b>HAVING</b> работает почти так же, как и <b>WHERE</b>, вот только применяется не для всех столбцов, а для набора, созданного оператором <b>GROUP BY</b>."
    },
  {
    "q": "№ 20. При выборке из таблицы прибавьте к дате 1 день",
    "a": "<code>SELECT DATE_ADD(date, 1 DAY) as new_date FROM table;\n</code>\nФункция <b>DATE_ADD()</b> прибавляет к дате заданный промежуток времени. Синтаксис выглядит следующим образом:\n<code>\nSELECT DATE_ADD(дата, INTERVAL что_прибавить) FROM имя_таблицы WHERE условие;\n</code>"
    },
  {
    "q": "№ 21. Выберите только уникальные имена",
    "a": "<code>SELECT DISTINCT name FROM users;</code>\n\n<b>SELECT DISTINCT</b> возвращает разные значения, даже если в выбранном столбце есть дубли."
    },
  {
    "q": "№ 22. Найдите в таблице среднюю зарплату работников",
    "a": "<code>SELECT AVG(salary) FROM workers;\n</code>\nФункция <b>AVG()</b> применяется только к числовым типам данных и возвращает среднее значение по столбцу."
    },
  {
    "q": "№ 23. Получите список сотрудников с зарплатой выше средней",
    "a": "<code>SELECT * FROM workers\nWHERE salary > (SELECT AVG (salary) FROM workers);</code>"
    },
  {
    "q": "№ 24. Даны таблицы <b>workers</b> и <b>departments</b>. Найдите все департаменты без единого сотрудника",
    "a": "<code>\nSELECT department_name\nFROM workers w\nRIGHT JOIN departments d ON (w.department_id = d.department_id)\nWHERE first_name IS NULL;\n</code>"
    },
  {
    "q": "№ 25. Замените в таблице зарплату работника на 1000, если она равна 900, и на 1500 в остальных случаях",
    "a": "Замена значений — одна из наиболее часто встречаемых задач по SQL на собеседованиях. Решить её несложно:\n<code>\nUPDATE table SET salary =\nCASE\nWHEN salary = 900 THEN 1000\nELSE 1500\nEND;\n</code>\nОператор <b>UPDATE</b> используется для изменения существующих записей. Но ответы на подобные вопросы с собеседований по SQL должны быть более развёрнутыми. Уточните, что после <b>UPDATE</b> следует указать, какие записи должны быть обновлены. В противном случае обновятся все записи в таблице.\n\nВ нашем примере условие задаётся через оператор CASE: если текущая зарплата равна 900, изменяем её на 1000, в остальных случаях — на 1500."
    },
  {
    "q": "№ 26. При выборке из таблицы пользователей создайте поле, которое будет включать в себя и имена, и зарплату",
    "a": "<code>SELECT CONCAT(name, salary) AS new_field FROM users;</code>\n\nФункция <b>CONCAT()</b> используется для конкатенации (объединения) строк, неявно преобразуя при этом любые типы данных в строки."
    },
  {
    "q": "№ 27. Переименуйте таблицу",
    "a": "<code>ALTER TABLE first_table RENAME second_table;</code>\n\nС помощью оператора <b>ALTER TABLE</b> можно добавлять, удалять, изменять столбцы, а также изменять название таблицы."
    }
]