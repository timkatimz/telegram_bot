[
    {
    "q": "№ 1. Python - интерпретируемый язык или компилируемый?",
    "a": "PYTHON – ИНТЕРПРЕТИРУЕМЫЙ ЯЗЫК\nЧто это означает – интерпретируемый? А то, что код выполняется(интерпретируется) из исходного текста, без предварительного перевода в машинный код. Код, написанный на компилируемых языках, типа C++, сначала переводятся в машинный код (самый распространенный пример – откомпилированного кода – файл с расширением .exe).Принято считать, что интерпретируемые языки программирования работают медленнее, чем компилируемые – из-за того, что трансляция осуществляется не сразу. Но отладка и написание кода происходит быстрее, потому что не нужно ожидать, пока компилятор закончит работать."

    },
    {
    "q": "№ 2. Каковы преимущества использования Python?",
    "a": "Преимущества использования языка Python следующие. \nПростота использования - Python является языком программирования высокого уровня, который легко применять, читать, писать и изучать. \nИнтерпретируемый язык - поскольку Python является интерпретируемым языком, он выполняет код построчно и останавливается, если в какой-либо строке возникает ошибка.\nДинамическая типизация - разработчик не назначает типы данных переменным во время кодирования. Они автоматически присваиваются во время выполнения.\nБесплатность и открытый исходный код - Python можно свободно использовать и применять. Он является открытым исходным кодом.\nШирокая поддержка библиотек - Python имеет обширные библиотеки, содержащие практически все необходимые функции. Кроме того, он предоставляет возможность импортировать другие пакеты с помощью менеджера пакетов Python (pip).\nПортативность - программы на Python могут работать на любой платформе без каких-либо изменений.\nСтруктуры данных, используемые в Python, удобны для пользователя. Он обеспечивает большую функциональность при меньших затратах на разработку кода."
    },
    {
    "q": "№ 3. Что такое PEP 8?",
    "a": "PEP расшифровывается как Python Enhancement Proposal.\nЭто набор правил, определяющих, как форматировать код Python для максимальной читабельности."
    },
    {
    "q": "№ 4. Какие виды типов данных есть и перечислите типы данных каждого вида.",
    "a": "В Python существуют изменяемые и неизменяемые типы.\nК неизменяемым (immutable) типам относятся: целые числа (int), числа с плавающей точкой (float), комплексные числа (complex), логические переменные (bool), кортежи (tuple), строки (str) и неизменяемые множества (frozen set).\nК изменяемым (mutable) типам относятся: списки (list), множества (set), словари (dict)."
    },
    {
    "q": "№ 5. Что такое область видимости переменных?",
    "a": "Область видимости или scope определяет контекст переменной, в рамках которого ее можно использовать. В Python есть два типа контекста: глобальный и локальный.\nГлобальный контекст\nГлобальный контекст подразумевает, что переменная является глобальной, она определена вне любой из функций и доступна любой функции в программе.\nЛокальный контекст\nВ отличие от глобальных переменных локальная переменная определяется внутри функции и доступна только из этой функции, то есть имеет локальную область видимости"
    },
    {
    "q": "№ 6. Что такое Introspection (Интроспекция)?",
    "a": "Многие языки программирования поддерживают интроспекцию, и Python не является исключением. В общем, в контексте объектно-ориентированных языков программирования, интроспекция — это способность объекта во время выполнения получить тип, доступные атрибуты и методы, а также другую информацию, необходимую для выполнения дополнительных операций с объектом.\ndir()\nПервая функция — это функция dir(). Она предоставляет список атрибутов и методов, доступных для указанного объекта, который может быть объявленной переменной или функцией.\n>>> a = [1, 2, 3]\n>>> dir(a)\ntype()\nДругой часто используемой функцией интроспекции является функция type(). Как видно из названия, эта функция возвращает тип объекта, который может быть примитивным типом данных, объектом, классом или модулем. Давайте посмотрим на примеры ниже:\n>>> type(1.2)\n<class 'float'>"
    },
    {
    "q": "№ 7. Разница между is и ==?",
    "a": "В Python для сравнения существует два  оператора , а именно is и ==, но работают они по разному:\nСравнение через == проверяет значения операндов.\nВ то время как is проверяет указывают ли операнды на один и тот же объект в памяти."
    },
    {
    "q": "№ 8. Что такое пространства имен в Python?",
    "a": "Пространство имен в python - это имя, которое присваивается каждому объекту в python. Объектами являются переменные и функции. При создании каждого объекта создается его имя вместе с пространством имен (адрес внешней функции, в которой находится объект).\nПространства имен хранятся в python как словарь, где ключ - это пространство имен, а значение - адрес объекта. В python существует 4 типа пространств имен:\n\n- Встроенные пространства имен - эти пространства имен содержат все встроенные объекты в python и доступны всегда, когда запущен python.\n- Глобальные пространства имен - это пространства имен для всех объектов, созданных на уровне основной программы.\n- Охватывающие пространства имен - эти пространства имен находятся на более высоком уровне или во внешней функции.\n- Локальные пространства имен - эти пространства имен находятся на локальном уровне или во внутренней функции."
    },
    {
    "q": "№ 9. Что такое декораторы в Python?",
    "a": "Декораторы используются для добавления некоторых моделей проектирования в функцию без изменения ее структуры. Декораторы обычно определяются перед функцией, которую они улучшают. \nЧтобы применить декоратор, мы сначала определяем функцию-декоратор.\nЗатем мы пишем функцию, к которой она применяется, и просто добавляем функцию-декоратор над функцией, к которой она должна быть применена. Для этого мы используем символ @ перед декоратором"
    },
    {
    "q": "№ 10. Что такое list, dict comprehension (Генераторы словарей, списков)?",
    "a": "Генератор словарей и списков - это еще один краткий способ определения словарей и списков.\nПример генератор списка:\nx=[i for i in range(5)].\nПриведенный выше код создает список, как показано ниже\n[0,1,2,3,4]\nПример генератор словаря: \nx=[i : i+2 for i in range(5)]\nПриведенный выше код создает список следующего вида:\n[0: 2, 1: 3, 2: 4, 3: 5, 4: 6]"
    },
    {
    "q": "№ 11. Каковы основные встроенные типы данных в Python?",
    "a": "Основные встроенные типы данных в Python следующие:\nЧисла - они включают целые числа, числа с плавающей точкой и комплексные числа. например, 1, 7.9,3+4i.\n\n<b>Список</b> - Упорядоченная последовательность элементов называется списком. Элементы списка могут принадлежать к разным типам данных. Например, [5,'market',2.4].\n\n<b>Кортеж</b> - это также упорядоченная последовательность элементов. В отличие от списков, кортежи неизменяемы, то есть их нельзя изменить. Например, (3,'tool',1).\n\n<b>Строка</b> - последовательность символов называется строкой. Они объявляются в одинарных или двойных кавычках. Например, \"Сана\", 'Она идет на рынок' и т.д.\n\n<b>Set</b> - Множество - это коллекция уникальных элементов, которые не упорядочены. Например, {7,6,8}.\n\n<b>Словарь</b> - словарь хранит значения в парах ключ и значение, где каждое значение может быть доступно через ключ. Порядок элементов не важен. Например, {1:'яблоко', 2:'манго}.\n\n<b>Булевы значения (bool)</b> - Есть два булевых значения: True и False."
    },
    {
    "q": "№ 12. В чем разница между файлами .py и .pyc?",
    "a": "Файлы .py - это файлы исходного кода python. В то время как файлы .pyc содержат байткод файлов python. Файлы .pyc создаются, когда код импортируется из другого источника. Интерпретатор преобразует исходные файлы .py в файлы .pyc, что помогает сэкономить время."
    },
    {
    "q": "№ 13. Что такое срез в Python?",
    "a": "<b>Slicing</b> используется для доступа к частям последовательностей, таких как списки, кортежи и строки. Синтаксис нарезки следующий - <b>[начало:конец:шаг]</b>. Шаг может быть опущен. Когда мы пишем <b>[start:end]</b>, это возвращает все элементы последовательности от начала (включительно) до элемента end-1. Если начальный или конечный элемент имеет отрицательное значение i, то это означает, что это i-ный элемент от конца. Шаг указывает на прыжок или на то, сколько элементов должно быть пропущено. Например, если есть список <b>[1,2,3,4,5,6,7,8]</b>. Тогда <b>[-1:2:2]</b> будет возвращать элементы, начиная с последнего элемента до третьего, печатая каждый второй элемент, т.е. <b>[8,6,4]</b>."
    },
    {
    "q": "№ 14. В чем разница между list и tuples в Python?",
    "a": "Списки являются изменяемыми, т.е. их можно редактировать. \nКортежи неизменяемы (кортежи - это списки, которые нельзя редактировать).\nСписки обрабатываются медленнее, чем кортежи. Кортежи быстрее, чем списки.\n<b>Syntax:</b>\nlist_1 = [10, ‘ITCODER’, 20]\n<b>Syntax:</b>\ntuple_1 = (10, ‘ITCBOOTCAMP’ , 20)"
    },
    {
    "q": "№ 15. Каковы ключевые особенности Python?",
    "a": "Python является <b>интерпретируемым языком</b>. Это означает, что, в отличие от таких языков, как C и его разновидностей, Python не нужно компилировать перед запуском. К другим интерпретируемым языкам относятся PHP и Ruby.\n\nPython <b>динамически типизирован</b>, это означает, что вам не нужно указывать типы переменных при их объявлении или что-то в этом роде. Вы можете делать такие вещи, как x=111, а затем x=\"Я строка\" без ошибок.\n\nPython хорошо подходит для <b>объектно-ориентированного программирования</b>, поскольку он позволяет определять классы, а также компоновать и наследовать их. В Python нет указателей доступа (как в C++ - public, private).\n\nВ Python функции являются <b>объектами первого класса</b>. Это означает, что их можно присваивать переменным, возвращать из других функций и передавать в функции. Классы также являются объектами первого класса.\n\nКод на Python пишется быстро, но выполняется он зачастую медленнее, чем на компилируемых языках. К счастью, Python позволяет включать расширения, основанные на языке C, поэтому узкие места могут быть оптимизированы, что часто и происходит. Хорошим примером этого является пакет numpy, который действительно работает довольно быстро, потому что большая часть вычислений, которые он выполняет, на самом деле выполняется не в Python.\n\nPython находит применение во многих сферах - веб-приложения, автоматизация, научное моделирование, приложения для работы с большими данными и многое другое. Он также часто используется в качестве \"клеящего\" кода, чтобы заставить другие языки и компоненты хорошо работать."
    },
    {
    "q": "№ 16. Что такое ключевые слова в Python?",
    "a": "Ключевые слова в python - это зарезервированные слова, которые\nимеют особое значение. Они обычно используются для определения\nтипа переменных. Ключевые слова нельзя использовать для имен\nпеременных или функций. В python есть следующие 33 ключевых слова-\n<b>And\nOr\nNot\nIf\nElif\nElse\nFor\nWhile\nBreak\nAs\nDef\nLambda\nPass\nReturn\nTrue\nFalse\nTry\nWith\nAssert\nClass\nContinue\nDel\nExcept\nFinally\nFrom\nGlobal\nImport\nIn\nIs\nNone\nNonlocal\nRaise\nYield</b>"
    },
    {
    "q": "№ 17. Что такое литералы в Python и объясните различные литералы.",
    "a": "Литерал в исходном коде python представляет собой фиксированное\nзначение для примитивных типов данных. В python существует 5 типов\nлитералов.\n1. Строковые литералы - строковый литерал создается путем\nприсвоения переменной некоторого текста, заключенного в\nодинарные или двойные кавычки. Чтобы создать многострочный\nлитерал, присвойте многострочный текст, заключенный в тройные\nкавычки. Например, name=\"Makers\".\n2. Символьный литерал - создается путем присвоения переменной\nодного символа, заключенного в двойные кавычки. Например, a='t'\n3. Числовые литералы - они включают числовые значения, которые\nмогут быть целым числом, значением с плавающей точкой или\nкомплексным числом. Например, a=50\n4. Булевы литералы - они могут иметь два значения - True или False.\n5. Коллекции литералов - они бывают четырех типов:\na) коллекции списков - например, a=[1,2,3,'Anas'].\nb) Литералы кортежей - например, a=(5,6,7,8)\nc) Словарные литералы - Например, dict={1: 'apple', 2: 'mango, 3:\n'banana'}\nd) Литералы множества - Например, {\"Anas\", \"Yrys\", \"Мaks\"}.\n6. Специальный литерал- В Python есть один специальный литерал\nNone, который используется для возврата нулевой переменной."
    },
    {
    "q": "№ 18. Как объединить массивы данных в pandas?",
    "a": "Массивы данных в python можно объединить следующими способами.\n\n- Конкатенировать их, складывая 2 массива данных вертикально.\n- Конкатенация путем укладки двух массивов данных по горизонтали.\n- Объединение их на общем столбце. Это называется объединением.\n\nДля объединения двух массивов данных используется функция <b>concat()</b>. Ее синтаксис таков - <b>pd.concat([dataframe1, dataframe2])</b>. Массивы данных объединяются по общему столбцу, называемому ключом. Когда мы объединяем все строки в массиве данных, это объединение, а используемое соединение - внешнее соединение.\nЕсли же мы объединяем общие строки или пересечения, то используется внутреннее объединение. Его синтаксис таков - <b>pd.concat([dataframe1, dataframe2], axis='axis', join='type_of_join)</b>"
    },
    {
    "q": "№ 19. Как осуществляется управление памятью в Python?",
    "a": "Управление памятью в Python осуществляется следующими способами:\n\nУправление памятью в Python осуществляется с помощью частного пространства памяти Python. Все объекты и структуры данных Python располагаются в приватной памяти. Программист не имеет\nдоступа к этой приватной памяти. Вместо него об этом заботится интерпретатор Python.\n\nРаспределение пространства памяти для объектов Python осуществляется менеджером памяти Python. API ядра предоставляет программисту доступ к некоторым инструментам для написания кода.\n\nPython также имеет встроенный сборщик мусора, который перерабатывает всю неиспользуемую память, чтобы она могла быть доступна для пространства динамической памяти"
    },
    {
    "q": "№ 20. Что такое PYTHONPATH?",
    "a": "Это переменная окружения, которая используется при импорте модуля. Всякий раз, когда модуль импортируется, PYTHONPATH также просматривается, чтобы проверить наличие импортированных модулей в различных каталогах. Интерпретатор использует ее, чтобы определить, какой модуль загрузить."
    },
    {
    "q": "№ 21. ",
    "a": ""
    },
    {
    "q": "",
    "a": ""
    },
    {
    "q": "",
    "a": ""
    },
    {
    "q": "",
    "a": ""
    },
    {
    "q": "",
    "a": ""
    },
    {
    "q": "",
    "a": ""
    }

]